
#include <SPI.h>

#define EPD_100ASK_TEST_WIDTH           240
#define EPD_100ASK_TEST_HEIGHT          360

#define EPD_100ASK_TEST_BUSY_PIN        7
#define EPD_100ASK_TEST_RESET_PIN       6
#define EPD_100ASK_TEST_DC_PIN          5
#define EPD_100ASK_TEST_CS_PIN          10
#define EPD_100ASK_TEST_SCLK_PIN        12
#define EPD_100ASK_TEST_SDI_PIN         11

#define EPD_100ASK_TEST_COLOR_WHITE     0xFF
#define EPD_100ASK_TEST_COLOR_BLACK     0x00

#define EPD_100ASK_TEST_SPI_FREQUENCY   25000000

/**
 * Refresh type
**/
typedef enum {
    EPD_LUT_GC,         /* 全刷 */
    EPD_LUT_DU,         /* 局刷 */
    EPD_LUT_5S,         /* ... */
    _EPD_LUT_LAST,      /** Number of default events*/
} EPD_LUT_TYPE;

int lutsFlag = 0;
SPIClass * hspi = NULL;

static const unsigned char gImage_number_1[] = {
  /* Arial [未指定字号]*/
  /*  0[0x0030]   96x32 */
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x1F, 0xFF, 0xFF,
  0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x07, 0xFF, 0xFF, 0xFF, 0xC0, 0x1F, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x03, 0xFF, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFC, 0x01, 0xFF, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0xFF, 0xFF,
  0xFF, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0xFF, 0xFF, 0xFF, 0x80, 0x3F, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0xFF, 0xFF, 0xFF, 0xC0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF8, 0x03, 0xFF, 0xFF, 0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x07, 0xFF, 0xFF,
  0xFF, 0xF8, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static const unsigned char gImage_full_screen_test[10800] = {
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XF9,0XFF,0XFF,0XC0,0X03,0XFF,0XFD,
  0X9F,0XFF,0XFF,0XFD,0XBF,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XDC,0XFF,0XFF,0XEF,0XBB,0XFF,0XFD,0XA1,0XFF,
  0XFF,0XFD,0XBE,0X7F,0XFF,0XFE,0X3F,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFD,0XDA,0XFF,0XFF,0XEF,0XBB,0XFF,0XFD,0XBC,0X7F,0XFF,0XFE,
  0XAB,0X7F,0XFF,0X00,0X0F,0XFF,0XFB,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFD,0XDB,0X3F,0XFF,0XEF,0XBB,0XFF,0XE0,0X02,0X9F,0XFF,0XFE,0XAB,0X7F,
  0XFF,0XFF,0XF3,0XFF,0XFB,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XDB,0X9F,0XFF,0XC0,0X03,0XFF,0XFE,0XBE,0XFF,0XFF,0XFB,0X2B,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFB,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XDB,
  0XCF,0XFF,0XFF,0XEF,0XFF,0XFE,0XBE,0XFF,0XFF,0XFB,0X01,0X7F,0XFF,0XE0,0X37,0XFF,
  0XD8,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X03,0XCF,0XFF,
  0XFF,0XAF,0XFF,0XFE,0XF7,0XFF,0XFF,0XFA,0XAB,0X7F,0XFF,0XF7,0XB7,0XFF,0XE7,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XDB,0X9F,0XFF,0XBE,0X6F,
  0XFF,0XFE,0X96,0XFF,0XFF,0XFA,0XAB,0X5F,0XFF,0XF7,0XB7,0XFF,0XF3,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XDB,0X3F,0XFF,0XB9,0XEF,0XFF,0XFD,
  0XA2,0XFF,0XFF,0XF4,0XAB,0X3F,0XFF,0XF7,0XB7,0XFF,0XFC,0X00,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XDA,0X7F,0XFF,0XBF,0XEF,0XFF,0XF9,0XB4,0X7F,
  0XFF,0XF5,0XAB,0X7F,0XFF,0X77,0XB7,0XFF,0XFE,0XEE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFD,0XD8,0XFF,0XFF,0XBF,0XEF,0XFF,0XF3,0XB6,0X9F,0XFF,0XF5,
  0X01,0X7F,0XFF,0X70,0X37,0XFF,0XDE,0XEE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFD,0XDD,0XFF,0XFF,0XC0,0X01,0XFF,0XF4,0XB6,0XFF,0XFF,0XF6,0XAB,0X7F,
  0XFF,0X7F,0XF7,0XFF,0XDE,0XEE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XF9,0XFF,0XFF,0XFF,0XEF,0XFF,0XEE,0X36,0XFF,0XFF,0XFE,0XAB,0X7F,0XFF,0X7F,
  0XF7,0XFF,0XDE,0XEE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,
  0XFF,0XFF,0XFF,0XEF,0XFF,0XFF,0X36,0XFF,0XFF,0XFD,0XAB,0X7F,0XFF,0X80,0X07,0XFF,
  0XDE,0XEE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFD,0XBE,0X7F,0XFF,0XFF,0XF7,0XFF,0XC0,0X00,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0X00,0X03,0XFF,0XF3,
  0XD7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0X7F,0XFF,0XFF,0XBF,0XFB,0XFF,0XFB,0XD9,0XFF,
  0XFF,0XF9,0XFF,0XFF,0XFF,0XEF,0X3F,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XCF,
  0XFF,0XFF,0XFF,0XFF,0XFB,0X7F,0XFF,0XFF,0XAF,0XFB,0XFF,0XF9,0XDE,0X7F,0XFF,0XF6,
  0XFF,0XFF,0XFF,0XE0,0XC7,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0XC3,0XFF,0XCF,0XFF,0XFF,
  0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0XA0,0X8B,0XFF,0XFC,0XDE,0XFF,0XFF,0XF6,0XFF,0XFF,
  0XFF,0XEE,0XE3,0XFF,0XF8,0X00,0XFF,0XFF,0XFF,0XE1,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XAE,0XAB,0XFF,0XFE,0XDE,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XEE,
  0XEF,0XFF,0XFE,0XEE,0XFF,0XFF,0XFF,0XF0,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XB6,0XAB,0XFF,0XFF,0X5E,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0XEF,0XFF,
  0XFE,0XEE,0XFF,0XFF,0XFF,0XFC,0X3F,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XB8,0XAB,0XFF,0XE0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0XEF,0XFF,0XFE,0XEE,
  0XFF,0XFF,0XFF,0XFE,0X0F,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB6,0XAB,
  0XFF,0XE0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0XEF,0XFF,0XFE,0XEE,0XFF,0XFF,
  0XFF,0XFF,0X83,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB6,0XAB,0XFF,0XFF,
  0X5E,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X0F,0XFF,0XFE,0XEE,0XFF,0XFF,0XFC,0XFF,
  0XE0,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB6,0XAB,0XFF,0XFE,0XDE,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0XEF,0XFF,0XDE,0XEE,0XFF,0XFF,0XFC,0XFF,0XF8,0X0F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XA0,0X8B,0XFF,0XFD,0XDE,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XEE,0XEF,0XFF,0XDE,0XEE,0XFF,0XFF,0XFC,0XFF,0XFF,0X0F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XAF,0XFB,0XFF,0XF9,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XEE,0XEF,0XFF,0XDE,0XEE,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XBF,0XFB,0XFF,0XFB,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,
  0XEF,0XFF,0XE0,0X00,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0X00,0X03,0XFF,0XF3,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0XEF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFE,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XE7,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XF3,0XFF,0XFF,0XFF,0XF3,0XFF,0XF0,
  0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFE,0X07,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0XFF,0XFF,0XCF,0XFB,0XFF,0XFF,0XDF,0XBF,
  0XFF,0XF1,0XFB,0X7F,0XFF,0X3F,0XFF,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X1F,0XFF,0XC8,0XFB,0XFF,0XFF,0XD7,0X7F,0XFF,0XFE,
  0X0B,0X7F,0XFE,0XDF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFD,0XFF,0XCF,0XFF,0XFE,0X7B,0XFF,0XFF,0XDA,0XFF,0XFF,0XFC,0XFB,0X7F,
  0XFE,0XDF,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XFF,0XFF,0XFF,0XFF,0X33,0XFF,0XF8,0X2C,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0X3F,
  0XFF,0XFF,0XFE,0X00,0XFF,0XFF,0XFF,0XFF,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0X80,
  0X1F,0XFF,0XFF,0X87,0XFF,0XFD,0XA8,0XBF,0XFF,0XFB,0XBB,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFE,0XFF,0XFF,0XFF,0XFE,0X1C,0X7F,0XFF,0XFF,0XFF,0XFF,0XFD,0XDD,0XDF,0XFF,
  0XFF,0XFF,0XFF,0XFD,0XA5,0XBF,0XFF,0XFB,0XBB,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
  0XFF,0XFF,0XFF,0XFC,0X3E,0X3F,0XFF,0XFF,0XFF,0XFF,0XFD,0XDD,0XDF,0XFF,0XFF,0XFF,
  0XFF,0XFD,0XAD,0XBF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XFF,0XFF,
  0XFF,0XF8,0X7F,0X1F,0XFF,0XFF,0XFF,0XFF,0XFD,0XDD,0XDF,0XFF,0XFF,0XFF,0XFF,0XFD,
  0XA5,0XBF,0XFF,0XFB,0X03,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XF0,
  0XFF,0X8F,0XFF,0XFF,0XFF,0XFF,0XFD,0XDD,0XDF,0XFF,0XFF,0XFF,0XFF,0XFD,0XA9,0XBF,
  0XFF,0XFB,0X7B,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XE1,0XFF,0XC7,
  0XFF,0XFF,0XFF,0XFF,0XFD,0XDD,0XDF,0XFF,0XFF,0XFF,0XFF,0XF4,0X19,0XBF,0XFF,0XFB,
  0X7B,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XC3,0XFF,0XE3,0XFF,0XFF,
  0XFF,0XFF,0XFD,0XDD,0XDF,0XFF,0XFF,0XFF,0XFF,0XF7,0XDF,0XBF,0XFF,0XFB,0X7B,0XBF,
  0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0XFF,0XFF,0XFF,0X87,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,
  0XFD,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XF7,0XDF,0XBF,0XFF,0XFB,0X7B,0XBF,0XFF,0XFF,
  0XFF,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFB,0X78,0X3F,0XFF,0XFF,0XFF,0XFF,
  0XEF,0XFF,0XFF,0XFF,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0X7F,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF1,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X7F,0XFF,0XFF,0X3F,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XF6,0XEF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0X9F,0XFF,0XFF,0XE3,0XFF,0XFF,
  0XFF,0XF7,0X6D,0X3F,0XFF,0XFB,0XB7,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0X3F,
  0XFF,0XFF,0XFF,0XFF,0XFE,0X9F,0XDF,0XFF,0XCF,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFA,
  0X8D,0X9F,0XFF,0X7B,0XB7,0XFF,0XFB,0XEE,0XFF,0XFF,0XFF,0XE7,0XFF,0X3F,0XBF,0XFF,
  0XFF,0XFF,0XFF,0X5F,0XDF,0XFF,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X80,0X1F,
  0XFF,0X7B,0XB7,0XFF,0XFB,0XEE,0XFF,0XFF,0XFF,0XC0,0X00,0X3F,0X1F,0XFF,0XFF,0XFF,
  0XFF,0XE0,0X5F,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XAD,0XBF,0XFF,0X00,
  0X07,0XFF,0XFB,0XEE,0XFF,0XFF,0XFF,0XE0,0X00,0X3E,0X3F,0XFF,0XFF,0XFF,0XFC,0X65,
  0X5F,0XFF,0XFE,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0XAD,0XBF,0XFF,0XFD,0XBB,0XFF,
  0XF0,0X00,0XFF,0XFF,0XFF,0XF1,0XFF,0XFC,0X7F,0XFF,0XFF,0XFF,0XFD,0XD5,0X5F,0XFF,
  0XFF,0X81,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X20,0X3F,0XFF,0XBD,0XBB,0XFF,0XFF,0XFB,
  0XFF,0XFF,0XFD,0XF9,0XFF,0XF8,0XFF,0XFF,0XFF,0XFF,0XFD,0XD5,0X1F,0XFF,0XFC,0X7F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X2D,0XBF,0XFF,0XBD,0XBB,0XFF,0XFF,0XEB,0XFF,0XFF,
  0XF8,0X7C,0XFF,0XFD,0XFF,0XFF,0XFF,0XFF,0XFD,0X95,0X5F,0XFF,0XF1,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFC,0X2D,0XBF,0XFF,0XDF,0XBF,0XFF,0XEF,0X9B,0XFF,0XFF,0XFC,0X1E,
  0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0X45,0X5F,0XFF,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFD,0XA0,0X3F,0XFF,0XCE,0X03,0XFF,0XEE,0X7B,0XFF,0XFF,0XFF,0X03,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFD,0XF5,0X5F,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,
  0XAD,0XBF,0XFF,0XE1,0XBF,0XFF,0XEF,0XFB,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X3F,0XFF,
  0XFF,0XFF,0XFE,0X75,0X5F,0XFF,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XAD,0XBF,
  0XFF,0X97,0XBB,0XFF,0XEF,0XFB,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X3F,0XFF,0XFF,0XFF,
  0XFF,0XE5,0X5F,0XFF,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0X3B,
  0XB3,0XFF,0XF0,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X3F,0XFF,0XFF,0XFF,0XFF,0X20,
  0X5F,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XAD,0XBF,0XFF,0X7D,0XA7,0XFF,
  0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XF9,0XFF,0X3F,0XFF,0XFF,0XFF,0XFE,0XDF,0XDF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XAD,0XBF,0XFF,0X7E,0XAF,0XFF,0XFF,0XFB,
  0XFF,0XFF,0XFF,0XFF,0XF9,0XCF,0X3F,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFD,0XF7,
  0XFF,0XFF,0XCF,0XFF,0XFF,0XFD,0XAD,0XBF,0XFF,0X8F,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XC0,0X39,0XCF,0X3F,0XFF,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFE,0XF7,0XFF,0XFF,
  0XE7,0XFF,0XFF,0XFF,0X6F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,0XFF,0XFF,0XFF,0XC0,
  0X39,0XCF,0X3F,0XFF,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0XFF,0X77,0XFF,0XF0,0X01,0XFF,
  0XFF,0XF7,0X6F,0XBF,0XFF,0XFD,0XDF,0XFF,0XFF,0XBD,0XFF,0XFF,0XFF,0XE7,0X39,0XCF,
  0X3F,0XFF,0XFF,0XFF,0XFE,0X7F,0XFF,0XFF,0X80,0X37,0XFF,0XFF,0XFE,0X7F,0XFF,0XF3,
  0X6D,0XBF,0XFF,0X02,0XE7,0XFF,0XFF,0XDD,0XFF,0XFF,0XFF,0XE7,0X39,0XCF,0X3F,0XFF,
  0XFF,0XFF,0XFF,0X3F,0XFF,0XFF,0XF6,0X97,0XFF,0XFF,0XFF,0XBF,0XFF,0XF9,0X6D,0XBF,
  0XFF,0X7B,0X33,0XFF,0XE0,0X0D,0XFF,0XFF,0XFF,0XE7,0X38,0X01,0X3F,0XFF,0XFF,0XFF,
  0XFF,0XCF,0XFF,0XFF,0XF6,0XA7,0XFF,0XF7,0XFF,0XFF,0XFF,0XFC,0X2D,0XBF,0XFF,0X7B,
  0X9F,0XFF,0XFD,0XA5,0XFF,0XFF,0XFF,0XE7,0X38,0X01,0X3F,0XFF,0XFF,0XFF,0XFF,0XF0,
  0XFF,0XFF,0XF6,0XB1,0XFF,0XF8,0X00,0X7F,0XFF,0XFF,0X6D,0XBF,0XFF,0X7B,0XBF,0XFF,
  0XFD,0XA9,0XFF,0XFF,0XFC,0XE7,0X39,0XCF,0X3F,0XFF,0XFF,0XFF,0XFF,0XFC,0X0F,0XFF,
  0XF6,0XB7,0XFF,0XFB,0XEF,0X7F,0XFF,0XFF,0X6D,0XBF,0XFF,0X03,0X77,0XFF,0XFD,0XAC,
  0X7F,0XFF,0XFC,0XE0,0X39,0XCF,0X3F,0XFF,0XFF,0XFF,0XFF,0XE3,0XFF,0XFF,0XF6,0XB7,
  0XFF,0XFD,0XEF,0X7F,0XFF,0XFF,0X6D,0XBF,0XFF,0X00,0XEF,0XFF,0XFD,0XAD,0XFF,0XFF,
  0XFC,0XE0,0X39,0XCF,0X3F,0XFF,0XFF,0XFF,0XFF,0X8F,0XFF,0XFF,0XB6,0XB7,0XFF,0XFA,
  0XEF,0X7F,0XFF,0XFF,0X60,0X3F,0XFE,0X7F,0X1F,0XFF,0XFD,0XAD,0XFF,0XFF,0XFC,0XFF,
  0XF9,0XCF,0X3F,0XFF,0XFF,0XFF,0XFF,0X3F,0XFF,0XFF,0XB6,0XB7,0XFF,0XF7,0X80,0X7F,
  0XFF,0XFF,0X6D,0XBF,0XFF,0X3F,0X8F,0XFF,0XED,0XAD,0XFF,0XFF,0XFC,0XFF,0XF9,0XFF,
  0X3F,0XFF,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XB6,0XB7,0XFF,0XFC,0X6F,0X7F,0XFF,0XFF,
  0X6D,0XBF,0XFF,0XC7,0XE3,0XFF,0XED,0XAD,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0X3F,0XFF,
  0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,0X80,0X37,0XFF,0XF9,0XEF,0X3F,0XFF,0XF0,0X2D,0XBF,
  0XFF,0XF0,0X6F,0XFF,0XED,0XAD,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,
  0XF9,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XF7,0XEF,0XBF,0XFF,0XFF,0X6D,0XBF,0XFF,0XC7,
  0XEF,0XFF,0XE0,0X0D,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFB,0XFF,
  0XFF,0XFF,0XFF,0XF7,0XFF,0XF7,0XEF,0XBF,0XFF,0XFF,0X6D,0XBF,0XFF,0X9F,0X6F,0XFF,
  0XFF,0XFD,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XF8,0XEF,0XFF,0XFF,0XFF,0X6D,0XBF,0XFE,0X7F,0X0F,0XFF,0XFF,0XFD,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XDE,0XF7,
  0XFF,0XFB,0XB3,0XFF,0XFF,0XFF,0X6F,0XFF,0XFF,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XE7,0XFF,0X3F,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XEE,0XD7,0XFF,0XFB,
  0X95,0XFF,0XFF,0XFF,0XFD,0XFF,0XFF,0X6E,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XE7,0XFF,0X3F,0XFF,0XFF,0XFF,0XFD,0XF7,0XFF,0XFF,0XF6,0XD7,0XFF,0XFD,0XA6,0X7F,
  0XFF,0XF3,0XF9,0XDF,0XFF,0X6E,0XD7,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0X80,0X64,0X03,
  0X3F,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0XFE,0XD7,0XFF,0XFD,0XB7,0XBF,0XFF,0XFC,
  0X73,0XBF,0XFF,0XB6,0XD7,0XFF,0XF3,0XFE,0XFF,0XFF,0XFF,0X80,0X64,0X03,0X3F,0XFF,
  0XFF,0XFF,0XFE,0XF7,0XFF,0XFF,0X86,0XD7,0XFF,0XFD,0XBB,0XFF,0XFF,0XFF,0X97,0X7F,
  0XFF,0XB6,0XD7,0XFF,0XF2,0X3E,0XFF,0XFF,0XFF,0XCE,0X66,0X73,0X3F,0XFF,0XFF,0XFF,
  0XFE,0XF5,0XFF,0XFF,0XBE,0XD7,0XFF,0XFF,0XED,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XC0,
  0X57,0XFF,0XFF,0X9E,0XFF,0XFF,0XFF,0XCE,0X66,0X73,0X3F,0XFF,0XFF,0XFF,0XFE,0XF5,
  0XFF,0XFF,0XBC,0X01,0XFF,0XF8,0X26,0XFF,0XFF,0XFF,0XFA,0XBF,0XFF,0XEF,0XD7,0XFF,
  0XFF,0XCC,0XFF,0XFF,0XFF,0XCE,0X66,0X73,0X3F,0XFF,0XFF,0XFF,0XFF,0X66,0XFF,0XFF,
  0XBB,0XFF,0XFF,0XFD,0XA6,0XFF,0XFF,0XF0,0X0A,0XBF,0XFF,0XF7,0XD7,0XFF,0XFF,0XE1,
  0XFF,0XFF,0XFF,0XCE,0X66,0X73,0X3F,0XFF,0XFF,0XFF,0XFF,0X96,0XFF,0XFF,0XB3,0XFF,
  0XFF,0XFD,0XAA,0XFF,0XFF,0XFE,0XAA,0XBF,0XFE,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XCE,0X66,0X73,0X3F,0XFF,0XFF,0XFF,0XFF,0X37,0X7F,0XFF,0XB4,0X01,0XFF,0XFD,
  0XA8,0XFF,0XFF,0XFE,0XAA,0XBF,0XFF,0XF7,0XD7,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XC0,
  0X64,0X03,0X3F,0XFF,0XFF,0XFF,0XFF,0X77,0X3F,0XFF,0XBE,0XD7,0XFF,0XF4,0X2C,0X3F,
  0XFF,0XFE,0XAA,0XBF,0XFF,0XEF,0XD7,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XC0,0X64,0X03,
  0X3F,0XFF,0XFF,0XFF,0XFE,0XF7,0XBF,0XFF,0X9E,0XD7,0XFF,0XF7,0XEA,0XFF,0XFF,0XFE,
  0XA8,0X1F,0XFF,0XDF,0XDB,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XFF,0XE7,0XFF,0X3F,0XFF,
  0XFF,0XFF,0XFE,0XF7,0XDF,0XFF,0XE6,0XD7,0XFF,0XF7,0XEA,0XFF,0XFF,0XF6,0XAA,0XBF,
  0XFF,0XB0,0X5B,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XFF,0XE7,0XFF,0X3F,0XFF,0XFF,0XFF,
  0XFD,0XF7,0XFF,0XFF,0XFA,0XD7,0XFF,0XF0,0X06,0XFF,0XFF,0XF6,0XAA,0XBF,0XFF,0XB6,
  0XDB,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XFF,0XE7,0XFF,0X3F,0XFF,0XFF,0XFF,0XFD,0XF7,
  0XFF,0XFF,0XE6,0XD7,0XFF,0XFF,0XEF,0XFF,0XFF,0XF6,0XAA,0XBF,0XFF,0X76,0XDB,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X04,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XCE,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X0A,0XBF,0XFF,0X76,0X5B,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFC,0X00,0X04,0X00,0X3F,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFB,0XBF,0XFF,0X79,0X5F,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XFF,0XE7,0XFF,0X3F,0XFF,0XFF,0XFF,0XF9,0XF7,0XFF,0XFF,0XBF,0XEB,0XFF,0XF1,
  0XFF,0XFF,0XFF,0XFB,0XEF,0XFF,0XFF,0X7F,0XFF,0XFF,0XEF,0X7B,0XFF,0XFF,0XF8,0XFF,
  0XE7,0X7F,0X3F,0XFF,0XFF,0XFF,0XFD,0XF9,0XFF,0XFF,0XCF,0X9B,0XFF,0XFE,0X00,0XFF,
  0XFF,0XF8,0X28,0X3F,0XFF,0X9F,0XFF,0XFF,0XEF,0XBB,0XFF,0XFF,0XFC,0X3F,0XE6,0X1F,
  0XFF,0XFF,0XFF,0XFF,0XFC,0XFE,0XFF,0XFF,0XF3,0X3B,0XFF,0XFF,0XDE,0XFF,0XFF,0XF4,
  0XAA,0XBF,0XFF,0XE0,0X07,0XFF,0XE0,0X00,0X7F,0XFF,0XFF,0X0F,0XFF,0X83,0XFF,0XFF,
  0XFF,0XFF,0XFE,0X7F,0X1F,0XFF,0XFC,0X7B,0XFF,0XFF,0XDE,0XFF,0XFF,0XF6,0XAA,0XBF,
  0XFF,0XFF,0XF7,0XFF,0XFF,0XBB,0XFF,0XFF,0XFF,0X83,0XFF,0XF0,0X7F,0XFF,0XFF,0XFF,
  0XFF,0X7F,0X8F,0XFF,0X71,0X83,0XFF,0XFF,0XDE,0XFF,0XFF,0XF6,0XAA,0XBF,0XFF,0XDF,
  0XF7,0XFF,0XFF,0XDB,0XFF,0XFF,0XFF,0XE0,0X3F,0XF8,0X1F,0XFF,0XFF,0XFF,0XFF,0XBF,
  0XBF,0XFF,0X27,0X9F,0XFF,0XFF,0XDE,0XFF,0XFF,0XF0,0XA2,0XBF,0XFF,0XEF,0X97,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X19,0X9F,0XFF,0XFF,0XFF,0XFF,0XCF,0XBF,0XFF,
  0X9F,0XC7,0XFF,0XFF,0XDE,0XBF,0XFF,0XFE,0XAA,0XBF,0XFF,0XF3,0X37,0XFF,0XE0,0X00,
  0XFF,0XFF,0XFF,0XFF,0X00,0X19,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XBF,0XFF,0XCF,0XF1,
  0XFF,0XFF,0XDE,0X7F,0XFF,0XFC,0XAA,0XBF,0XFF,0XF8,0X77,0XFF,0XEF,0XDE,0XFF,0XFF,
  0XFF,0XF8,0X1F,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XC9,0XBF,0XFF,0XE3,0XF7,0XFF,0XFF,
  0XDE,0XFF,0XFF,0XFA,0X28,0X3F,0XFF,0XF8,0X77,0XFF,0XEF,0XDE,0XFF,0XFF,0XFF,0XE0,
  0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0X3E,0X3F,0XFF,0XFC,0X17,0XFF,0XFF,0XDE,0XFF,
  0XFF,0XF7,0XEF,0XFF,0XFF,0XF3,0X37,0XFF,0XEF,0XDE,0XFF,0XFF,0XFF,0X83,0XFF,0XF9,
  0XFF,0XFF,0XFF,0XFF,0XFE,0X7F,0XFF,0XFF,0XE3,0XF7,0XFF,0XFF,0XDE,0XFF,0XFF,0XF3,
  0XAD,0XFF,0XFF,0XE7,0XD7,0XFF,0XEF,0XC0,0XFF,0XFF,0XFF,0X0F,0XFF,0X79,0XFF,0XFF,
  0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XCF,0XF7,0XFF,0XFF,0XDE,0XFF,0XFF,0XF9,0XDC,0XFF,
  0XFF,0XDF,0XF7,0XFF,0XEF,0XDE,0XFF,0XFF,0XFE,0X3F,0XFE,0X19,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XFF,0XFF,0XFF,0X3F,0X97,0XFF,0XFF,0X80,0XFF,0XFF,0XFC,0XCE,0XFF,0XFF,0X80,
  0X07,0XFF,0XEF,0XDE,0XFF,0XFF,0XFC,0X7F,0XFF,0X01,0XFF,0XFF,0XFF,0XFF,0XF9,0XFF,
  0XFF,0XFF,0X7F,0XC7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X67,0X7F,0XFF,0X7F,0XFF,0XFF,
  0XEF,0XDE,0XFF,0XFF,0XF8,0XFF,0XFF,0XE1,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X33,0XBF,0XFF,0X7F,0XFF,0XFF,0XE7,0X80,
  0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDD,0XFF,0XFF,0X8F,0XFF,0XFF,0XF1,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X03,0XFB,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XFF,
  0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0XFF,0XFF,0XFF,0XFA,0X0B,0XFF,0XE3,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X0F,0XFF,0XCF,0XF7,0X7F,0XFF,0XFC,0XFF,0X9F,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFE,0X7F,0XFF,0XFF,0XFA,0XFB,0XFF,0XF9,0XFF,0XFF,0XFF,0XF1,
  0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XF1,0XEE,0X7F,0XFF,0XFC,0XFF,0X9F,0XBF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDA,0XB3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,0XFF,
  0XFF,0X1F,0XFF,0XFF,0XFE,0X5C,0XFF,0XFF,0XFE,0X7F,0X9F,0X1F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XCA,0XA3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
  0X03,0XFF,0XFF,0XFD,0XFF,0XFF,0XFE,0X7F,0X9E,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XD2,0XAB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XC0,0X06,0XFF,0XFF,0XFE,0X3F,0X9E,0X3F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XD8,0XC8,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XED,0X76,
  0XFF,0XFF,0XFF,0X3F,0X9C,0X7E,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDA,0XD9,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XED,0X36,0XFF,0XFF,
  0XFF,0X3F,0X98,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XD2,0XCB,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XED,0XC0,0XFF,0XFF,0XFF,0X1F,
  0X98,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCA,0XAB,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XED,0XF6,0XFF,0XFF,0XFF,0X9F,0X91,0XF8,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X5A,0XB3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XED,0XF6,0XFF,0XFF,0XFF,0X8F,0X9B,0XF1,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7A,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7E,0XF7,0XFF,0XED,0X00,0XFF,0XFF,0XFF,0XC7,0X9F,0XF1,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0X02,0X0B,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,
  0XF7,0XFF,0XED,0X76,0XFF,0XFF,0XFF,0XC7,0X9F,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,
  0XED,0X76,0XFF,0XFF,0XFF,0XE3,0X9F,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XC0,0X06,
  0XFF,0XFF,0XFF,0XF1,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XFF,0XFF,
  0XFF,0XF8,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0X7F,0XFF,0XF6,
  0X00,0X7F,0XFF,0XFF,0XE7,0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
  0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XF7,0XDF,0XFF,0XFF,0XBF,0XFF,0XFB,0X77,0X7F,
  0XFF,0XFF,0XF1,0XFF,0XFF,0X7D,0XDF,0XFF,0XE0,0X03,0XFF,0XFF,0XFF,0XF1,0X9F,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XDF,0XFF,0X01,0XBF,0XFF,0XFF,0X77,0X7F,0XFF,0XF8,
  0X00,0X7F,0XFF,0X3D,0XDF,0XFF,0XFF,0XFF,0X7F,0XFF,0XFF,0XF3,0X9F,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XF7,0XDF,0XFF,0XBD,0X9F,0XFF,0XFF,0X77,0X7F,0XFF,0XFF,0XFF,0X9F,
  0XFF,0X1D,0XDF,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XE7,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XF7,0XDF,0XFF,0XBD,0XAF,0XFF,0XF2,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X45,
  0XDF,0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,0XC7,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,
  0XDF,0XFF,0XBD,0XA7,0XFF,0XE7,0XFF,0XFF,0XFF,0XFF,0X01,0XBF,0XFF,0X71,0XDF,0XFF,
  0XFC,0X0F,0XFF,0XFF,0XFF,0XCF,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X1F,0XFF,
  0XBD,0XB3,0XFF,0XFF,0XF7,0X7F,0XFF,0XFF,0XBD,0XBF,0XFF,0X79,0XDF,0XFF,0XFE,0XEE,
  0XFF,0XFF,0XFF,0X8F,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XDF,0XFF,0XBD,0XB9,
  0XFF,0XFE,0X03,0X7F,0XFF,0XFF,0XBD,0XBF,0XFF,0X7C,0X03,0XFF,0XFE,0XEE,0XFF,0XFF,
  0XFF,0X9F,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XEF,0XFF,0XBD,0XB9,0XFF,0XF3,
  0X6B,0X7F,0XFF,0XFF,0XBD,0XBF,0XFF,0XBD,0XDF,0XFF,0XFE,0XEE,0XFF,0XFF,0XFF,0X3F,
  0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XEF,0XFF,0XBD,0XB3,0XFF,0XE7,0X6C,0X7F,
  0XFF,0XFB,0XBD,0XBF,0XFF,0XBD,0XDF,0XFF,0XFE,0XEE,0XFF,0XFF,0XFE,0X3F,0X9F,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XEF,0XFF,0XBD,0XAF,0XFF,0XFF,0X6B,0X7F,0XFF,0XFB,
  0X81,0XBF,0XFF,0XB5,0XDF,0XFF,0XEE,0X0E,0XFF,0XFF,0XFE,0X7F,0X9F,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XF7,0XEF,0XFF,0XBD,0X9F,0XFF,0XFF,0X6B,0X7F,0XFF,0XFB,0XFF,0XBF,
  0XFF,0XAD,0XDF,0XFF,0XEF,0XFE,0XFF,0XFF,0XFC,0X7F,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XF7,0XEF,0XFF,0X01,0XBF,0XFF,0XFB,0X6B,0X7F,0XFF,0XFB,0XFF,0XBF,0XFF,0X9D,
  0XDF,0XFF,0XEF,0XFE,0XFF,0XFF,0XFE,0XFF,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,
  0XFF,0XFF,0XFF,0XBF,0XFF,0XF6,0X08,0X7F,0XFF,0XFC,0X00,0X3F,0XFF,0X3D,0XDF,0XFF,
  0XEF,0XFE,0XFF,0XFF,0XFF,0XFF,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7F,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBF,0XFE,0XFD,0XDF,0XFF,0XF0,0X00,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XF7,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,
  0XEF,0X7F,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XA0,0X1F,0XFF,0X1F,0XFF,0XFF,0XFB,0XEF,0X7F,
  0XFF,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFD,0XB6,0XDF,0XFF,0XCF,0XFF,0XFF,0XFD,0XEF,0X7F,0XFF,0XF0,
  0X00,0X7F,0XFE,0X3F,0XFF,0XFF,0XC0,0X2A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFD,0XB6,0XDF,0XFF,0XFF,0XFF,0XFF,0XFE,0XEF,0X7F,0XFF,0XFF,0XFF,0X9F,
  0XFF,0X9F,0XFF,0XFF,0XFA,0XAA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XB6,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0X2F,0X7F,0XFF,0XFD,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFA,0XAA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XB6,
  0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC7,0X7F,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFA,0XAA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XE8,0X7F,0XFF,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFA,0XAA,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XB6,0XDF,0XFF,0XFF,0XFF,
  0XFF,0XF0,0X2F,0X7F,0XFF,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFA,0XA0,0X7F,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XB6,0XDF,0XFF,0XFF,0XFF,0XFF,0XF7,
  0XEF,0X7F,0XFF,0XF7,0X7F,0XDF,0XFF,0XFF,0XFF,0XFF,0XFA,0XAA,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XB6,0XDF,0XFF,0XFF,0XFF,0XFF,0XF7,0XEF,0X7F,
  0XFF,0XF3,0XBF,0X3F,0XFF,0XFF,0XFF,0XFF,0XDA,0XAA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFD,0XB6,0XDF,0XFF,0XFF,0XFF,0XFF,0XF7,0XEF,0X7F,0XFF,0XF9,
  0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XDA,0XAA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFD,0XB6,0XDF,0XFF,0XFF,0XFF,0XFF,0XF7,0XEF,0X7F,0XFF,0XFC,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XDA,0XAA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XA0,0X1F,0XFF,0XFF,0XFF,0XFF,0XF7,0XEF,0X7F,0XFF,0XFE,0X1F,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XC0,0X2A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XBF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0XEF,0XFF,0XFF,0XFC,0XE0,0X1F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XEA,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEE,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XEF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XEF,0X7F,0XFF,0X3F,0XFF,0XFF,0XF0,
  0X00,0X7F,0XFF,0XFF,0X7F,0X7F,0XFE,0XFF,0XFF,0XFF,0XDF,0XDF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0XEF,0X7F,0XFF,0X8F,0XFF,0XFF,0XFB,0XBB,0X7F,
  0XFF,0XFF,0XBF,0X7F,0XFE,0XFF,0XF7,0XFF,0XCF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFE,0X6F,0X7F,0XFF,0XE0,0X03,0XFF,0XFB,0XBB,0X7F,0XFF,0XFF,
  0XCF,0X7F,0XFF,0X7F,0XF7,0XFF,0XEF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X20,0X0F,0XFF,0XFB,0XBB,0XFF,0XF0,0X00,0X7F,0XFF,0XF0,0X07,0X7F,
  0XFF,0X7F,0X87,0XFF,0XF7,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X6F,0X7F,0XFF,0XFB,0XBB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0X7F,0XFF,0XBE,
  0X77,0XFF,0XF3,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,
  0X7F,0XFF,0XFB,0XBB,0XFF,0XEF,0XFF,0XFF,0XFF,0XFB,0XFE,0X7F,0XFF,0XB9,0XF7,0XFF,
  0XF9,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X7F,0XFF,
  0XFB,0XBB,0XFF,0XE0,0X00,0X7F,0XFF,0XFB,0XEF,0X1F,0XFF,0XD3,0XF7,0XFF,0XFE,0X1E,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X7F,0XFF,0XFB,0XBB,
  0XFF,0XF7,0XB7,0X7F,0XFF,0XFB,0XEF,0X7F,0XFF,0XCF,0XF7,0XFF,0XFF,0X00,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XAF,0X7F,0XFF,0X7B,0XBB,0XFF,0XF7,
  0XB7,0X7F,0XFF,0XFB,0XEF,0X7F,0XFF,0XCF,0XF7,0XFF,0XFE,0XDE,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X20,0X0F,0XFF,0X7B,0XBB,0XFF,0XFB,0XB7,0X7F,
  0XFF,0XFB,0XEF,0X7F,0XFF,0XB3,0XF7,0XFF,0XF9,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFE,0X6F,0X7F,0XFF,0X7B,0XBB,0XFF,0XFC,0X07,0X7F,0XFF,0XF8,
  0X01,0X7F,0XFF,0XB9,0XF7,0XFF,0XF7,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFC,0XEF,0X7F,0XFF,0X80,0X03,0XFF,0XF3,0XB7,0X7F,0XFF,0XFB,0XEF,0X7F,
  0XFF,0X7E,0X37,0XFF,0XE7,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XF9,0XEF,0X7F,0XFF,0XFF,0XFF,0XFF,0XEF,0XB7,0X7F,0XFF,0XFB,0XEF,0X7F,0XFF,0X7F,
  0XC7,0XFF,0XEF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XEF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XA0,0X7F,0XFF,0XFB,0XEF,0X7F,0XFE,0X7F,0XFF,0XFF,
  0XDF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XF1,0XBF,0XFF,0XFF,0XFB,0XEF,0X7F,0XFE,0XFF,0XFF,0XFF,0XDF,0XDF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XFF,0X7F,0XFF,0XFD,0XF7,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0X7F,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XC0,0X7F,0XFF,0XFE,0XF7,0XFF,0XF3,
  0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0X7E,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X1F,0X0F,0XFF,0XFF,0X77,0XFF,0XED,0XFF,0XFF,
  0XFF,0XF3,0XFF,0XFF,0XFF,0X0E,0XFB,0XFF,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X0F,0X7F,0XFF,0X80,0X37,0XFF,0XED,0XFF,0XFF,0XFF,0XF9,
  0XFF,0XFF,0XFF,0XE6,0X7B,0XFF,0XDB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X70,0X7F,0XFF,0XF6,0X97,0XFF,0XF3,0XFF,0XFF,0XFF,0XFC,0XFF,0XFF,
  0XFF,0XFE,0X03,0XFF,0XDB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFE,0XFF,0XFF,0XFF,0XF6,0XA7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X7F,0XFF,0XFF,0X0F,
  0X7B,0XFF,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X40,
  0X3F,0XFF,0XF6,0XB1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X9F,0XFF,0XFE,0X7B,0X7B,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X6D,0XAF,0XFF,
  0XF6,0XB7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE1,0XFF,0XFE,0XF8,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFC,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X6D,0X9F,0XFF,0XF6,0XB7,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X1F,0XFE,0XF6,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XE0,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0X6D,0XBF,0XFF,0XB6,0XB7,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XC7,0XFF,0XFE,0XE7,0XBB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,
  0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X3F,0XFF,0XB6,0XB7,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0X1F,0XFF,0XFE,0XFF,0X3B,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X03,0XFF,0X01,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X6D,0XBF,0XFF,0XB6,0XB7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
  0X7F,0XFF,0XFE,0XFE,0X7B,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,0XF0,0X7F,0XFF,
  0XFF,0XFF,0XFF,0X6D,0X9F,0XFF,0X80,0X37,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XFF,0XFF,
  0XFF,0X1F,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0XFF,0XFF,0XFC,0X3F,0XFF,0XFF,0XFF,
  0XFF,0X6D,0XAF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XE8,
  0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0XFF,0XFF,0XFF,0X3F,0XFF,0XFF,0XFF,0XFF,0X40,
  0X3F,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0XFF,0XFF,0XFF,0XCB,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XBF,0XFF,0XFF,0XFF,0XFF,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0X98,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFD,0XFF,0X7F,0XFF,0XFF,0XFF,
  0XFF,0XFE,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XBC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XC0,0X7F,0XFF,0X80,0X01,0XFF,0XFE,
  0X7F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XF7,0XFF,0XFD,0XFE,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X1F,0X0F,0XFF,0XEF,0XFD,0XFF,0XFF,0X3F,0X7F,
  0XFF,0XF0,0X00,0XFF,0XFF,0XBE,0XF7,0XFF,0XFC,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X0F,0X7F,0XFF,0XEF,0X1D,0XFF,0XFF,0X9F,0X7F,0XFF,0XFF,
  0XFF,0XDF,0XFF,0XC0,0X07,0XFF,0XFE,0X7E,0XFF,0XFF,0XFF,0X7F,0XF3,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X70,0X7F,0XFF,0XE0,0XE5,0XFF,0XFF,0XCF,0X7F,0XFF,0XFF,0XFF,0XBF,
  0XFF,0XDE,0XF7,0XFF,0XFF,0X3E,0XFF,0XFF,0XFE,0X3F,0XF3,0XC0,0XFF,0XFF,0XFF,0XFF,
  0XFE,0XFF,0XFF,0XFF,0X9F,0XF9,0XFF,0XFF,0XE7,0X7F,0XFF,0XFF,0XFF,0X7F,0XFF,0XDE,
  0XF7,0XFF,0XFF,0X9E,0XFF,0XFF,0XFE,0X3F,0XF3,0XC0,0XFF,0XFF,0XFF,0XFF,0XFC,0X01,
  0XFF,0XFF,0XC7,0XFF,0XFF,0XFF,0XFB,0X7F,0XFF,0XFC,0X01,0XFF,0XFF,0XBF,0XFF,0XFF,
  0XFF,0XCE,0XFF,0XFF,0XFF,0X1F,0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XAD,0X0F,0XFF,
  0XF0,0X01,0XFF,0XE0,0X00,0X7F,0XFF,0XFE,0XED,0XBF,0XFF,0XDF,0XEF,0XFF,0XFF,0XF6,
  0XFF,0XFF,0XFF,0X8F,0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XAD,0X6F,0XFF,0XFD,0XDD,
  0XFF,0XFF,0XFE,0X7F,0XFF,0XFE,0XED,0XBF,0XFF,0X60,0X6F,0XFF,0XC0,0X00,0XFF,0XFF,
  0XFF,0XC7,0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XAD,0X6F,0XFF,0XFD,0XDD,0XFF,0XFF,
  0XEF,0X7F,0XFF,0XFE,0XED,0XBF,0XFF,0X7B,0X6F,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0XE3,
  0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFD,0XAD,0X6F,0XFF,0XBD,0XDD,0XFF,0XFF,0XCF,0X7F,
  0XFF,0XFE,0XED,0XBF,0XFF,0X7B,0X6B,0XFF,0XFF,0XDE,0XFF,0XFF,0XFF,0XE1,0XF3,0XFC,
  0XFF,0XFF,0XFF,0XFF,0XFD,0XAD,0X6F,0XFF,0XBD,0XDD,0XFF,0XFF,0XDF,0X7F,0XFF,0XF6,
  0X01,0XBF,0XFF,0X03,0X67,0XFF,0XFF,0X9E,0XFF,0XFF,0XFF,0XF0,0XF3,0XFC,0XFF,0XFF,
  0XFF,0XFF,0XFD,0XAD,0X6F,0XFF,0XBD,0XDD,0XFF,0XFF,0XBF,0X7F,0XFF,0XF7,0XFF,0XBF,
  0XFF,0XFB,0X6F,0XFF,0XFF,0XBE,0XFF,0XFF,0XFF,0XF8,0X73,0XFC,0XFF,0XFF,0XFF,0XFF,
  0XFD,0XAD,0X0F,0XFF,0XBD,0XDD,0XFF,0XFF,0X3F,0X7F,0XFF,0XF7,0XFF,0XBF,0XFF,0XFB,
  0X6F,0XFF,0XFF,0X7E,0XFF,0XFF,0XFF,0XFE,0X33,0XFC,0XFF,0XFF,0XFF,0XFF,0XFC,0X01,
  0XFF,0XFF,0XC0,0X01,0XFF,0XFF,0X7F,0X7F,0XFF,0XF7,0XFF,0XBF,0XFF,0XEB,0X6F,0XFF,
  0XFE,0X7E,0XFF,0XFF,0XFF,0XFF,0X13,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X3F,0XFF,0XD0,0X6F,0XFF,0XFE,0XFE,
  0XFF,0XFF,0XFF,0XFF,0X83,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XE3,0XFC,0XDF,0XFF,0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0X80,0X03,0XFF,0XF1,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XA7,0XFF,0XFF,0XF8,0X00,
  0X00,0X0C,0X0F,0XFF,0XFF,0XFF,0XFB,0X7F,0XFF,0XFF,0XDF,0X7B,0XFF,0XFE,0X00,0XFF,
  0XFF,0XFF,0XFF,0X3F,0XFF,0XE7,0XDF,0XFF,0XEF,0XB0,0XFF,0XFF,0XF8,0X00,0X00,0X0C,
  0X1F,0XFF,0XFF,0XFF,0XFB,0X7F,0XFF,0XFF,0XDF,0X7B,0XFF,0XF7,0XFE,0XFF,0XFF,0XFC,
  0XFF,0XBF,0XFF,0XF8,0XDF,0XFF,0XF3,0XBC,0X3F,0XFF,0XFF,0XFF,0XC3,0XFC,0X3F,0XFF,
  0XFF,0XFF,0XFC,0XFF,0XFF,0XFF,0X80,0X03,0XFF,0XF7,0XE6,0XFF,0XFF,0XFC,0X8F,0XBF,
  0XFE,0X00,0X03,0XFF,0XFC,0X01,0XFF,0XFF,0XFF,0XFF,0X83,0XFC,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0X0E,0XFF,0XFF,0XFF,0XE7,0XBF,0XFF,0XFE,
  0X5F,0XFF,0XFC,0XBD,0XFF,0XFF,0XFF,0XFE,0X13,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XAB,0XFF,0XF4,0XFE,0XFF,0XFF,0XFF,0XF3,0X3F,0XFE,0XF6,0XDF,0XFF,
  0XF9,0XBD,0XFF,0XFF,0XFF,0XFC,0X73,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0X00,0XAB,0XFF,0XF7,0XFE,0X3F,0XFF,0XFF,0XF8,0X7F,0XFE,0XF6,0XFF,0XFF,0XF3,0XBD,
  0XFF,0XFF,0XFF,0XF8,0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,
  0XFF,0XF7,0XE2,0X7F,0XFF,0XFF,0XFF,0XFF,0XFE,0XF6,0X57,0XFF,0XEF,0XFF,0XFF,0XFF,
  0XFF,0XF1,0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,0XFF,0XF6,
  0X1E,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X47,0X4F,0XFF,0XC0,0X00,0XFF,0XFF,0XFF,0XE3,
  0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0X81,0XFF,0XF1,0XFE,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X57,0X9F,0XFF,0XF7,0XFE,0XFF,0XFF,0XFF,0XC7,0XF3,0XFC,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X6A,0XAB,0XFF,0XF6,0X7E,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X16,0X03,0XFF,0XF7,0XFE,0XFF,0XFF,0XFF,0X8F,0XF3,0XFC,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X6A,0XAB,0XFF,0XF7,0X8E,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XB7,0X9F,0XFF,0XF7,0XFE,0XFF,0XFF,0XFF,0X8F,0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0X6A,0XAB,0XFF,0XF7,0XF2,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X17,
  0X4F,0XFF,0XF7,0XFE,0XFF,0XFF,0XFF,0X1F,0XF3,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0X00,0XAB,0XFF,0XF7,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X67,0X4F,0XFF,
  0XF7,0XFE,0XFF,0XFF,0XFE,0X3F,0XF3,0XC0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XBB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X76,0XD7,0XFF,0XC0,0X00,
  0XFF,0XFF,0XFE,0X3F,0XF3,0XC0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XBE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XF6,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7F,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X03,0XFF,0XFF,
  0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XDF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBF,0XFB,0XFF,0XFF,0XEE,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0XFF,0XFF,0XCF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XAF,0XFB,0XFF,0XF0,0X06,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XEF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XA0,0X8B,0XFF,0XFE,0XD2,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7E,0XF7,0XFF,0XF7,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XAE,0XAB,0XFF,0XFE,0XD4,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,
  0XF7,0XFF,0XF3,0XDE,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XB6,0XAB,0XFF,0XFE,0XD6,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,
  0XF9,0XDE,0XFF,0XFF,0XF1,0XFF,0XFF,0XFE,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XB8,0XAB,0XFF,0XFE,0XD6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XFE,0X1E,
  0XFF,0XFF,0XF0,0XFF,0XFF,0XF8,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB6,0XAB,
  0XFF,0XFE,0XD6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X07,0XFF,0XFF,0X00,0XFF,0XFF,
  0XFC,0X1F,0XFF,0XE0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB6,0XAB,0XFF,0XF6,
  0XD6,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XFE,0XDE,0XFF,0XFF,0XFE,0X03,
  0XFF,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB6,0XAB,0XFF,0XF6,0XD6,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XF9,0XDE,0XFF,0XFF,0XFF,0X80,0X00,0X07,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XA0,0X8B,0XFF,0XF6,0XD6,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XF7,0XDE,0XFF,0XFF,0XFF,0XE0,0X00,0X1F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XAF,0XFB,0XFF,0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7A,0XF7,0XFF,0XE7,0XDE,0XFF,0XFF,0XFF,0XFC,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XBF,0XFB,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X66,
  0XF7,0XFF,0XEF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0X00,0X03,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X4E,0XF7,0XFF,
  0XDF,0XDE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XF7,0XFF,0XDF,0XDF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X5F,
  0XFF,0XFF,0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC1,0X67,0XFF,0XFF,
  0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0X79,0XFF,0XF0,0X00,0X3F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XCF,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0X7B,0XFF,0XFF,0XFD,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFB,0X6F,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFB,0X6F,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XDF,0X7B,0XFF,0XF7,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,
  0X6F,0XFF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XC1,0X7B,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0X6F,0XFF,
  0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XBE,0X7B,0XFF,0XFB,0XED,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0X6F,0XFF,0XEF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X9E,0XFF,
  0XFF,0XFB,0XED,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0X6B,0XFF,0XE0,0X00,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCE,0XEF,0XFF,0XFD,
  0X8D,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X67,0XFF,0XEF,0XEF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF2,0XEF,0XFF,0XFE,0X6D,0XBF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0X6F,0XFF,0XEF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X01,0XFF,0XFC,0XED,0XBF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFB,0X6F,0XFF,0XEF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF2,0XEF,0XFF,0XFA,0XED,0XBF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFB,0X6F,0XFF,0XEF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XCE,0XEF,0XFF,0XF7,0X40,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,
  0X6F,0XFF,0XEF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0X9E,0X0F,0XFF,0XF7,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0X6F,0XFF,
  0XEF,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XBE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XCF,0XFF,0XEF,0XEF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XEF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X1F,0XFF,0XFF,0XE3,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFB,0XFF,0XFC,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFE,0X3F,0XFF,0XFF,0XC1,0XFD,0XFF,0XFF,0XFD,0XF1,0XFF,0XFC,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X9F,0XFF,0XFF,0XED,0X05,0XFF,0XFF,0XF8,0XF8,0X7F,0XFC,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XED,0XB5,0XFF,0XFF,0XF8,0XFC,0X3C,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XED,0XB5,0XFF,0XFF,0XFC,0X7F,0X0C,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0XB5,
  0XFF,0XFF,0XFE,0X3F,0X84,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0XB5,0X7F,0XFF,
  0XFE,0X3F,0XEC,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0XB4,0XFF,0XFF,0XFF,0X1F,
  0XFC,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0XB5,0XFF,0XFF,0XFF,0X87,0XFC,0XFC,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0XB5,0XFF,0XFF,0XFF,0XC3,0XFC,0XE0,0X0F,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XED,0XB5,0XFF,0XFF,0XFF,0XE0,0XFC,0XE0,0X0F,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XED,0X05,0XFF,0XFF,0XFF,0XF8,0X1C,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XC1,0XFD,0XFF,0XFF,0XFF,0XFE,0X00,0X0C,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,
  0XFF,0XFF,0XFC,0XFF,0XC0,0X0C,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFC,0XFF,0XFC,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBF,0XFF,0XFF,0XFF,
  0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,
  0XFC,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XF0,0X00,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X01,0XF7,0XFF,0XE0,0X01,0XFF,0XFF,0XFC,0XFF,0XFC,0XFC,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0X3F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFD,0XF7,0XFF,0XFF,0XFF,0X7F,0XFF,0XFC,0XFF,0XFC,0XFC,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFD,0X17,0XFF,0XEE,0X14,0X7F,0XFF,0XFC,0XFF,0XFC,0XFC,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XC0,0X01,0XFF,0XFE,0X03,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X85,
  0X57,0XFF,0XF6,0XF2,0XFF,0XFF,0XFC,0XFF,0XFC,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XDF,0XDF,0XFF,0XFF,0X7B,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XD5,0X57,0XFF,
  0XF8,0X07,0XFF,0XFF,0XFC,0XFF,0XFC,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XEF,0XDF,0XFF,0XFF,0X7B,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XD5,0X57,0XFF,0XFE,0XF3,
  0X7F,0XFF,0XFC,0X7F,0XFC,0XE0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XDF,
  0XFF,0XFF,0X7B,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XD5,0X53,0XFF,0XF4,0X15,0X7F,0XFF,
  0XFE,0X3F,0XFC,0XE0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XFF,0XF7,
  0X7B,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XD5,0X53,0XFF,0XFB,0XDF,0X7F,0XFF,0XFE,0X00,
  0X00,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XF7,0X03,0X7F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XD5,0X57,0XFF,0XF9,0XE7,0X7F,0XFF,0XFF,0X80,0X00,0XFC,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBF,0XBF,0XFF,0XF7,0XFF,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X45,0X57,0XFF,0XFE,0X11,0X7F,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBF,0XDF,0XFF,0XF7,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7D,0X57,0XFF,0XEC,0XF7,0X7F,0XFF,0XFF,0XFF,0XEF,0XFC,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XBF,0XEF,0XFF,0XF8,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,
  0X17,0XFF,0XED,0XD7,0X7F,0XFF,0XFF,0XFF,0X87,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XC3,0XF7,0XFF,0XFF,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,0XF7,0XFF,
  0XEB,0XE7,0X7F,0XFF,0XFF,0XFE,0X0F,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X01,0XF7,0XFF,0XE0,0X00,
  0X7F,0XFF,0XFF,0XF8,0X3F,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFB,
  0XFF,0XFF,0X7F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XF0,0XFF,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XFB,0XFF,0XFD,
  0X5F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFE,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,
  0XFF,0XFC,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0X8B,0XFF,0XFD,0X51,0X7F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X7C,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XFF,0XF9,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,0XFF,0XFD,0X55,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XB8,0X1F,0XFF,0XC7,0XFF,0XFF,0XFF,0XFF,0XE7,0XE3,0XF9,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XAA,0XAB,0XFF,0XF5,0X55,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XC3,0XC7,0XFF,0XF3,0XFF,0XFF,0XFF,0XFF,0XE7,0XE0,0XF9,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XAA,0XAB,0XFF,0XF5,0X55,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XC7,
  0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XE4,0X39,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XAA,0XAB,0XFF,0XF5,0X55,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XB9,0XDF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XE7,0X09,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0X80,0X01,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0X1F,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XE7,0XE7,0XE1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,
  0XFF,0XFD,0X55,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XF3,0XE7,0XF8,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,0XFF,0XFD,
  0X55,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,
  0X00,0X39,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,0XFF,0XFD,0X55,0X7F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X40,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X39,
  0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,0XFF,0XFD,0X55,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X7F,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0XE7,0XF9,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEA,0XAB,0XFF,0XFD,0X55,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0XE7,0XF9,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XC0,0X8B,0XFF,0XF8,0X11,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,
  0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0XE7,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFB,0XFB,0XFF,0XFF,0X7F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFE,0X73,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFB,0XFB,0XFF,0XFF,0X7F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X7D,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFE,0X7F,0XF9,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,
  0XFF,0XFF,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFE,0X7F,0XF9,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XFF,0XFF,
  0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XF7,0XFF,0XFF,0XDF,0XFF,0XFF,0XFF,0X3F,
  0XF9,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0XEF,0XFF,0XF7,0XDF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XF7,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0X3F,0XF9,0XF3,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,0XFF,0XF0,0X00,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XF3,0XF7,0XFF,0XFF,0X6F,0XFF,0XFF,0XFF,0X00,0X01,0XF3,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,0XFF,0XFB,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XF9,0XF7,0XFF,0XFF,0X77,0XFF,0XFF,0XFF,0X00,0X01,0XF3,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,0XFF,0XFB,0XD7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,
  0XF7,0XFF,0XFF,0X7B,0XFF,0XFF,0XFF,0X3F,0XF9,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XBE,0XEF,0XFF,0XFB,0XD7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X77,0XFF,
  0XFF,0X7C,0XFF,0XFF,0XFF,0XBF,0XF9,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XBE,0X01,0XFF,0XFD,0X9B,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XB7,0XFF,0XFF,0X76,
  0X7F,0XFF,0XFF,0X9F,0XF9,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,
  0XFF,0XFE,0X5B,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XDF,0X6E,0X7F,0XFF,
  0XFF,0X9F,0XF9,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,0XFF,0XFC,
  0XDD,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0XFF,0XE7,0X5C,0XFF,0XFF,0XFF,0X9F,
  0XF8,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,0XFF,0XFD,0XDC,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0XF7,0XFF,0XF3,0X79,0XFF,0XFF,0XFF,0XF8,0X00,0X00,
  0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBE,0XEF,0XFF,0XFB,0XDE,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFC,0XF7,0XFF,0XF9,0X73,0XFF,0XFF,0XFF,0X80,0X0F,0XF3,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0XEF,0XFF,0XFB,0XDF,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFD,0XF7,0XFF,0XFC,0X77,0XFF,0XFF,0XFE,0X07,0XFF,0XF3,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0XFF,0XF7,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,
  0XF7,0XFF,0XFE,0X6F,0XFF,0XFF,0XFC,0X7F,0XFF,0XF3,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XEF,0XFF,0XF7,0XDF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0XF7,0XFF,
  0XFF,0XEF,0XFF,0XFF,0XF9,0XFF,0XFF,0XF3,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XF7,0XFF,0XFF,0XDF,
  0XFF,0XFF,0XF8,0XFF,0XFF,0XF2,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0XFF,0XFF,
  0XF8,0X03,0XFF,0XF3,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X9F,0XCB,0XFF,0XF0,
  0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X07,
  0XFF,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC7,0X1B,0XFF,0XFF,0XFE,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X07,0XFF,0XFF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X7B,0XFF,0XFF,0XFE,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFE,0XF7,0X77,0XFF,0XDF,0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,0X03,0XFF,0XFE,0X06,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFE,0XF7,0X77,0XFF,0XDF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XCF,0X3F,0XFF,0XFF,0X76,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
  0X07,0XFF,0XEF,0XF3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0X76,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XE7,0XB8,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0X00,0X03,0XFF,0XFF,0X76,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7E,0X3F,0XFF,0XF7,0X3A,
  0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBB,0XB4,
  0XFF,0XFF,0X76,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0X87,0XFF,0XF3,0X7B,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBB,0XB7,0XFF,0XFF,
  0X76,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0XBF,0XFF,0XF8,0X7B,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBB,0XB6,0XFF,0XF7,0X06,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0XBF,0XFF,0XFC,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XF7,0XFE,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0X00,0X03,0XFF,0XFE,0XFB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XBB,0XB3,0XFF,0XF7,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0X7B,0XBF,0XFF,0XFF,0X7B,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XBB,0XB7,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,
  0XBF,0XFF,0XFF,0XBB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XBB,0XB7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7B,0XBF,0XFF,
  0XFF,0XCB,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XBF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0XBF,0XFF,0XFF,0XF3,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XF7,0XBF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF3,
  0XB0,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF9,0XBB,0X7F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF6,0X0B,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE7,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XBB,0X7F,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XF9,0X40,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XBB,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XF0,0X6A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XBB,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XF7,0X6A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XF8,0X30,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X6A,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X6A,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X6A,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0X6A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF6,0X00,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0X6A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XED,0X6A,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XED,0X40,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XED,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XED,0X7F,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XEF,0X7F,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
  0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
};


//GC
static const unsigned char lut_R20_GC[] = 
{
  0x01,0x0f,0x0f,0x0f,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};							  
static const unsigned char lut_R21_GC[] = 
{
  0x01,0x4f,0x8f,0x0f,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};						 
static const unsigned char lut_R22_GC[] = 
{
  0x01,0x0f,0x8f,0x0f,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
static const unsigned char lut_R23_GC[] = 
{
  0x01,0x4f,0x8f,0x4f,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
static const unsigned char lut_R24_GC[] = 
{
  0x01,0x0f,0x8f,0x4f,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


// DU
static const unsigned char lut_R20_DU[] = 
{
  0x01,0x0f,0x01,0x00,0x00,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_R21_DU[] =   
{
  0x01,0x0f,0x01,0x00,0x00,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_R22_DU[] = 
{
  0x01,0x8f,0x01,0x00,0x00,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_R23_DU[] = 
{
  0x01,0x4f,0x01,0x00,0x00,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_R24_DU[] = 
{
  0x01,0x0f,0x01,0x00,0x00,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_vcom[] =
{
  0x01,0x19,0x19,0x19,0x19,0x01,0x01,
  0x01,0x19,0x19,0x19,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_ww[] ={
  0x01,0x59,0x99,0x59,0x99,0x01,0x01,
  0x01,0x59,0x99,0x19,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,

};

static const unsigned char lut_bw[] ={
  0x01,0x59,0x99,0x59,0x99,0x01,0x01,
  0x01,0x59,0x99,0x19,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_wb[] ={
	
  0x01,0x19,0x99,0x59,0x99,0x01,0x01,
  0x01,0x59,0x99,0x59,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

static const unsigned char lut_bb[] ={
  0x01,0x19,0x99,0x59,0x99,0x01,0x01,
  0x01,0x59,0x99,0x59,0x01,0x01,0x01,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


//LUT download
void lut_5S(void)
{
  unsigned int count;

  hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
  digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer
  
  EPD_Write_Com(0x20);							//vcom
  for (count = 0; count < 42; count++)
  {
    EPD_Write_Data(lut_vcom[count]);
  }

  EPD_Write_Com(0x21);							//red not use
  for (count = 0; count < 42; count++)
  {
    EPD_Write_Data(lut_ww[count]);
  }

  EPD_Write_Com(0x24);							//wb w
  for (count = 0; count < 42; count++)
  {
    EPD_Write_Data(lut_bb[count]);
  }

  if (lutsFlag == 0)
  {

    EPD_Write_Com(0x22);							//bb b
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_bw[count]);
    }


    EPD_Write_Com(0x23);							//bw r
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_wb[count]);
    }

    lutsFlag = 1;
  }
  else
  {

    EPD_Write_Com(0x23);							//bb b
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_bw[count]);
    }


    EPD_Write_Com(0x22);							//bw r
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_wb[count]);
    }

    lutsFlag = 0;
  }

  digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
  hspi->endTransaction();

}


//LUT download
void lut_GC(void)
{
  unsigned int count;

  hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
  digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer

  EPD_Write_Com(0x20);							//vcom
  for (count = 0; count < 56; count++)
  {
    EPD_Write_Data(lut_R20_GC[count]);
  }

  EPD_Write_Com(0x21);							//red not use
  for (count = 0; count < 42; count++)
  {
    EPD_Write_Data(lut_R21_GC[count]);
  }

  EPD_Write_Com(0x24);							//bb b
  for (count = 0; count < 42; count++)
  {
    EPD_Write_Data(lut_R24_GC[count]);
  }

  if (lutsFlag == 0)
  {

    EPD_Write_Com(0x22);							//bw r
    for (count = 0; count < 56; count++)
    {
      EPD_Write_Data(lut_R22_GC[count]);
    }

    EPD_Write_Com(0x23);							//wb w
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_R23_GC[count]);
    }
    lutsFlag = 1;
  }
  else
  {
    EPD_Write_Com(0x22);							//bw r
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_R23_GC[count]);
    }

    EPD_Write_Com(0x23);							//wb w
    for (count = 0; count < 56; count++)
    {
      EPD_Write_Data(lut_R22_GC[count]);
    }
    lutsFlag = 0;
  }

  digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
  hspi->endTransaction();

}


//LUT download
void lut_DU(void)
{
  unsigned int count;

  hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
  digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer

  EPD_Write_Com(0x20);							//vcom
  for (count = 0; count < 56; count++)
  {
    EPD_Write_Data(lut_R20_DU[count]);
  }

  EPD_Write_Com(0x21);							//red not use
  for (count = 0; count < 42; count++)
  {
    EPD_Write_Data(lut_R21_DU[count]);
  }

  EPD_Write_Com(0x24);							//bb b
  for (count = 0; count < 42; count++)
  {
    EPD_Write_Data(lut_R24_DU[count]);
  }

  if (lutsFlag == 0)
  {

    EPD_Write_Com(0x22);							//bw r
    for (count = 0; count < 56; count++)
    {
      EPD_Write_Data(lut_R22_DU[count]);
    }

    EPD_Write_Com(0x23);							//wb w
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_R23_DU[count]);
    }
    lutsFlag = 1;
  }
  else
  {

    EPD_Write_Com(0x22);							//bw r
    for (count = 0; count < 42; count++)
    {
      EPD_Write_Data(lut_R23_DU[count]);
    }

    EPD_Write_Com(0x23);							//wb w
    for (count = 0; count < 56; count++)
    {
      EPD_Write_Data(lut_R22_DU[count]);
    }
    lutsFlag = 0;
  }

  digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
  hspi->endTransaction();
}


void EPD_display_image_data(const unsigned char* picData)
{
  unsigned int i;

  hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
  digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer

  EPD_Write_Com(0x13);		     //Transfer new data
  for (i = 0; i < ((EPD_100ASK_TEST_HEIGHT * EPD_100ASK_TEST_WIDTH) / 8); i++)
  {
    EPD_Write_Data(*picData);
    picData++;
  }

  digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
  hspi->endTransaction();
}

void EPD_display_clear_color_to(unsigned char color)
{
  unsigned int row, column;

  hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
  digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer

  EPD_Write_Com(0x10);		     //Transfer new data
  for (column = 0; column < ((EPD_100ASK_TEST_HEIGHT * EPD_100ASK_TEST_WIDTH) / 8); column++)
  {
    EPD_Write_Data(color);
  }

  EPD_Write_Com(0x13);		     //Transfer new data
  for (column = 0; column < ((EPD_100ASK_TEST_HEIGHT * EPD_100ASK_TEST_WIDTH) / 8); column++)
  {
    EPD_Write_Data(color);
  }

  digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
  hspi->endTransaction();
}


void EPD_100ask_display_partial(unsigned int x0, unsigned int y0, unsigned int w, unsigned int h, const uint8_t * data) //partial display 
{
    unsigned int i,count;  
    unsigned int x_start1, x_end1, y_start1, y_start2, y_end1, y_end2;

    x_start1 = x0;//转换为字节
    x_end1 = x0 + h-1; 

    y_start1 = 0;
    y_start2 = y0;
    if(y0 >= 256)
    {
        y_start1 = y_start2 / 256;
        y_start2 = y_start2 % 256;
    }

    y_end1 = 0;
    y_end2 = y0 + w - 1;
    if(y_end2 >= 256)
    {
        y_end1 = y_end2 / 256;
        y_end2 = y_end2 % 256;		
    }		

    count = w * h / 8;

    /*********************************************************/	
    //需要重新复位和初始化设置!!!!
    /*********************************************************/	
    EPD_reset();
    EPD_Init();

    hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
    digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer

    EPD_Write_Com(0X50);      // 
    EPD_Write_Data(0xF7);     // Border
    /*********************************************************/		

    EPD_Write_Com(0x00);			// panel setting   PSR
    EPD_Write_Data(0xFF);			// RES1 RES0 REG KW/R     UD    SHL   SHD_N  RST_N	
    EPD_Write_Data(0x01);			// x x x VCMZ TS_AUTO TIGE NORG VC_LUTZ	

    EPD_Write_Com(0x91);		//This command makes the display enter partial mode
    EPD_Write_Com(0x90);		//resolution setting
    EPD_Write_Data (x_start1);   //x-start     
    EPD_Write_Data (x_end1);	 //x-end	

    EPD_Write_Data (y_start1);
    EPD_Write_Data (y_start2);   //y-start    

    EPD_Write_Data (y_end1);		
    EPD_Write_Data (y_end2);  //y-end
    EPD_Write_Data (0x01);	


    EPD_Write_Com(0x13);				 //writes New data to SRAM.
    for(i = 0; i < count; i++)	     
    {
        EPD_Write_Data(data[i]);         //图片  
    }

    digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
    hspi->endTransaction();
}

void EPD_refresh(EPD_LUT_TYPE lut)
{
  switch (lut)
    {
    case EPD_LUT_GC:
        lut_GC();

        hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
        digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer
        EPD_Write_Com(0x17);			//DISPLAY REFRESH
        EPD_Write_Data(0xA5);
        digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
        hspi->endTransaction();

        lcd_chkstatus();
        delay(10);
        break;
    case EPD_LUT_DU:
        lut_DU();
        
        hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
        digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer
        EPD_Write_Com(0x17);			//DISPLAY REFRESH
        EPD_Write_Data(0xA5);
        digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
        hspi->endTransaction();

        lcd_chkstatus();
        delay(10);

        EPD_reset();	
        EPD_Init();
        hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
        digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer
        EPD_Write_Com(0x50);			//DISPLAY REFRESH
        EPD_Write_Data(0xD7);
        digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
        hspi->endTransaction();
        break;
    case EPD_LUT_5S:
        lut_5S();
        break;
    default:
        return;
        break;
    }
}


void lcd_chkstatus(void)
{
  while (0 == digitalRead(EPD_100ASK_TEST_BUSY_PIN))
    delay(20);
}


void EPD_sleep(void)
{
  hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
  digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer

  EPD_Write_Com(0X07);    //deep sleep
  EPD_Write_Data(0xA5);

  digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
  hspi->endTransaction();
}


void EPD_reset(void)
{
  digitalWrite(EPD_100ASK_TEST_RESET_PIN, HIGH);
  delay(20);
  digitalWrite(EPD_100ASK_TEST_RESET_PIN, LOW);
  delay(20);
  digitalWrite(EPD_100ASK_TEST_RESET_PIN, HIGH);
  delay(20);
}


void EPD_Writ_Bus(unsigned char d)
{
  hspi->transfer(d);
}

void EPD_Write_Com(unsigned char cmd)
{
  //*(portOutputRegister(digitalPinToPort(EPD_100ASK_TEST_DC_PIN))) &=  ~digitalPinToBitMask(EPD_100ASK_TEST_DC_PIN);//EPD_RS=0;
  digitalWrite(EPD_100ASK_TEST_DC_PIN, LOW);
  EPD_Writ_Bus(cmd);
}

void EPD_Write_Data(unsigned char data)
{
  //*(portOutputRegister(digitalPinToPort(EPD_100ASK_TEST_DC_PIN))) |=  digitalPinToBitMask(EPD_100ASK_TEST_DC_PIN); //EPD_RS=1;
  digitalWrite(EPD_100ASK_TEST_DC_PIN, HIGH);
  EPD_Writ_Bus(data);
}

void EPD_Write_Com_Data(unsigned char cmd, unsigned char data)
{
  EPD_Write_Com(cmd);
  EPD_Write_Data(data);
}


void SPI_Init(void)
{
  hspi = new SPIClass(HSPI);
  hspi->begin(EPD_100ASK_TEST_SCLK_PIN, -1, EPD_100ASK_TEST_SDI_PIN, EPD_100ASK_TEST_CS_PIN); //SCLK-14, MISO-12, MOSI-13, SS-15

  //set up slave select pins as outputs as the Arduino API
  //doesn't handle automatically pulling SS low
  pinMode(hspi->pinSS(), OUTPUT); //HSPI SS
}

void EPD_Init(void)
{
  hspi->beginTransaction(SPISettings(EPD_100ASK_TEST_SPI_FREQUENCY, MSBFIRST, SPI_MODE0));
  digitalWrite(hspi->pinSS(), LOW); //pull SS slow to prep other end for transfer  //CS

  EPD_Write_Com(0x00);     // panel setting   PSR
  EPD_Write_Data(0xFF);      // RES1 RES0 REG KW/R     UD    SHL   SHD_N  RST_N
  EPD_Write_Data(0x01);      // x x x VCMZ TS_AUTO TIGE NORG VC_LUTZ

  EPD_Write_Com(0x01);     // POWER SETTING   PWR
  EPD_Write_Data(0x03);      //  x x x x x x VDS_EN VDG_EN
  EPD_Write_Data(0x10);      //  x x x VCOM_SLWE VGH[3:0]   VGH=20V, VGL=-20V
  EPD_Write_Data(0x3F);      //  x x VSH[5:0]  VSH = 15V
  EPD_Write_Data(0x3F);      //  x x VSL[5:0]  VSL=-15V
  EPD_Write_Data(0x03);      //  OPTEN VDHR[6:0]  VHDR=6.4V
  // T_VDS_OFF[1:0] 00=1 frame; 01=2 frame; 10=3 frame; 11=4 frame
  EPD_Write_Com(0x06);     // booster soft start   BTST
  EPD_Write_Data(0x17);      //  BT_PHA[7:0]
  EPD_Write_Data(0x37);      //  BT_PHB[7:0]
  EPD_Write_Data(0x3D);      //  x x BT_PHC[5:0]

  EPD_Write_Com(0x82);     // VCOM_DC setting    VDCS
  EPD_Write_Data(0x07);      // x  VDCS[6:0] VCOM_DC value= -1.9v    00~3f,0x12=-1.9v

  EPD_Write_Com(0x30);
  EPD_Write_Data(0x09);

  EPD_Write_Com(0x61);     // resoultion setting
  EPD_Write_Data(0xf0);      //  HRES[7:3] 0 0 0
  EPD_Write_Data(0x01);      //  x x x x x x x VRES[8]
  EPD_Write_Data(0x68);      //  VRES[7:0]

  EPD_Write_Com(0X50);      //
  EPD_Write_Data(0xD7);     // Border

  delay(10);

  digitalWrite(hspi->pinSS(), HIGH); //pull ss high to signify end of data transfer
  hspi->endTransaction();

  lutsFlag = 0;
}


void setup()
{
  Serial.begin(115200);
  
  SPI_Init();

  pinMode(EPD_100ASK_TEST_BUSY_PIN, INPUT);
  pinMode(EPD_100ASK_TEST_RESET_PIN, OUTPUT);
  pinMode(EPD_100ASK_TEST_DC_PIN, OUTPUT);

  EPD_reset();
  EPD_Init();

  Serial.println("Setup done");

}

void loop()
{
  Serial.println("Begin testing...");
  
  EPD_display_clear_color_to(EPD_100ASK_TEST_COLOR_WHITE);
  EPD_refresh(EPD_LUT_GC);
  delay(2000);

  EPD_display_image_data(gImage_full_screen_test);
  EPD_refresh(EPD_LUT_GC);
  delay(2000);

  for(int count = 0; count <= 10; count++)
  {
    EPD_100ask_display_partial(0, (count*32), 32, 96, gImage_number_1);
    EPD_refresh(EPD_LUT_DU);
    delay(500);
  }

  Serial.println("Test successfully!");
}
